{
    "docs": [
        {
            "location": "/",
            "text": "zend-expressive-authentication-session\n\n\n\n\n\n\nThis library provides a \nzend-expressive-authentication\n\nadapter that handles form-based username/password authentication credentials\nwhere the user details are subsequently stored in a session.\n\n\nInstallation\n\n\nRun the following to install this library:\n\n\n$ composer require zendframework/zend-expressive-authentication-session\n\n\n\nConfiguration\n\n\nYou will need to provide configuration for this module to work correctly. The\nfollowing demonstrates:\n\n\n\n\nMapping a custom \nUserRepositoryInterface\n implementation for use as a backend\n  to the functionality this authentication adapter provides.\n\n\nMapping the \nPhpSession\n adapter as the \nAuthenticationInterface\n\n  implementation to use in your application.\n\n\nProviding configuration for this adapter, including custom field names for the\n  username and password, as well as a path in the application to which to redirect\n  when no valid credentials are present.\n\n\n\n\n<?php\n// in a config/autoload/*.global.php file:\n\ndeclare(strict_types=1);\n\n//use App\\Infrastructure\\Repository\\UserRepository;\n//use App\\Infrastructure\\Repository\\UserRepositoryFactory;\nuse Zend\\Expressive\\Authentication\\AuthenticationInterface;\nuse Zend\\Expressive\\Authentication\\Session\\PhpSession;\nuse Zend\\Expressive\\Authentication\\UserRepositoryInterface;\n\nreturn [\n    'dependencies' => [\n        'aliases' => [\n            AuthenticationInterface::class => PhpSession::class,\n            UserRepositoryInterface::class => UserRepository::class,\n        ],\n\n        'factories' => [\n            UserRepository::class => UserRepositoryFactory::class,\n        ],\n    ],\n\n    'authentication' => [\n        'username' => null, // provide a custom field name for the username\n        'password' => null, // provide a custom field name for the password\n        'redirect' => '/login', // URI to which to redirect if no valid credentials present\n    ],\n];\n\n\n\nDocumentation\n\n\nDocumentation is \nin the doc tree\n, and can be compiled using \nmkdocs\n:\n\n\n$ mkdocs build\n\n\n\nYou may also \nbrowse the documentation online\n.",
            "title": "zend-expressive-authentication-session"
        },
        {
            "location": "/#zend-expressive-authentication-session",
            "text": "This library provides a  zend-expressive-authentication \nadapter that handles form-based username/password authentication credentials\nwhere the user details are subsequently stored in a session.",
            "title": "zend-expressive-authentication-session"
        },
        {
            "location": "/#installation",
            "text": "Run the following to install this library:  $ composer require zendframework/zend-expressive-authentication-session",
            "title": "Installation"
        },
        {
            "location": "/#configuration",
            "text": "You will need to provide configuration for this module to work correctly. The\nfollowing demonstrates:   Mapping a custom  UserRepositoryInterface  implementation for use as a backend\n  to the functionality this authentication adapter provides.  Mapping the  PhpSession  adapter as the  AuthenticationInterface \n  implementation to use in your application.  Providing configuration for this adapter, including custom field names for the\n  username and password, as well as a path in the application to which to redirect\n  when no valid credentials are present.   <?php\n// in a config/autoload/*.global.php file:\n\ndeclare(strict_types=1);\n\n//use App\\Infrastructure\\Repository\\UserRepository;\n//use App\\Infrastructure\\Repository\\UserRepositoryFactory;\nuse Zend\\Expressive\\Authentication\\AuthenticationInterface;\nuse Zend\\Expressive\\Authentication\\Session\\PhpSession;\nuse Zend\\Expressive\\Authentication\\UserRepositoryInterface;\n\nreturn [\n    'dependencies' => [\n        'aliases' => [\n            AuthenticationInterface::class => PhpSession::class,\n            UserRepositoryInterface::class => UserRepository::class,\n        ],\n\n        'factories' => [\n            UserRepository::class => UserRepositoryFactory::class,\n        ],\n    ],\n\n    'authentication' => [\n        'username' => null, // provide a custom field name for the username\n        'password' => null, // provide a custom field name for the password\n        'redirect' => '/login', // URI to which to redirect if no valid credentials present\n    ],\n];",
            "title": "Configuration"
        },
        {
            "location": "/#documentation",
            "text": "Documentation is  in the doc tree , and can be compiled using  mkdocs :  $ mkdocs build  You may also  browse the documentation online .",
            "title": "Documentation"
        },
        {
            "location": "/intro/",
            "text": "zend-expressive-authentication-session\n\n\nThis library provides a \nzend-expressive-authentication\n\nadapter that handles form-based username/password authentication credentials\nwhere the user details are subsequently stored in a session.\n\n\nDocumentation forthcoming...\n\n\nConfiguration\n\n\nYou will need to provide configuration for this module to work correctly. The\nfollowing demonstrates:\n\n\n\n\nMapping a custom \nUserRepositoryInterface\n implementation for use as a backend\n  to the functionality this authentication adapter provides.\n\n\nMapping the \nPhpSession\n adapter as the \nAuthenticationInterface\n\n  implementation to use in your application.\n\n\nProviding configuration for this adapter, including custom field names for the\n  username and password, as well as a path in the application to which to redirect\n  when no valid credentials are present.\n\n\n\n\n<?php\n// in a config/autoload/*.global.php file:\n\ndeclare(strict_types=1);\n\n//use App\\Infrastructure\\Repository\\UserRepository;\n//use App\\Infrastructure\\Repository\\UserRepositoryFactory;\nuse Zend\\Expressive\\Authentication\\AuthenticationInterface;\nuse Zend\\Expressive\\Authentication\\Session\\PhpSession;\nuse Zend\\Expressive\\Authentication\\UserRepositoryInterface;\n\nreturn [\n    'dependencies' => [\n        'aliases' => [\n            AuthenticationInterface::class => PhpSession::class,\n            UserRepositoryInterface::class => UserRepository::class,\n        ],\n\n        'factories' => [\n            UserRepository::class => UserRepositoryFactory::class,\n        ],\n    ],\n\n    'authentication' => [\n        'username' => null, // provide a custom field name for the username\n        'password' => null, // provide a custom field name for the password\n        'redirect' => '/login', // URI to which to redirect if no valid credentials present\n    ],\n];",
            "title": "Introduction"
        },
        {
            "location": "/intro/#zend-expressive-authentication-session",
            "text": "This library provides a  zend-expressive-authentication \nadapter that handles form-based username/password authentication credentials\nwhere the user details are subsequently stored in a session.  Documentation forthcoming...",
            "title": "zend-expressive-authentication-session"
        },
        {
            "location": "/intro/#configuration",
            "text": "You will need to provide configuration for this module to work correctly. The\nfollowing demonstrates:   Mapping a custom  UserRepositoryInterface  implementation for use as a backend\n  to the functionality this authentication adapter provides.  Mapping the  PhpSession  adapter as the  AuthenticationInterface \n  implementation to use in your application.  Providing configuration for this adapter, including custom field names for the\n  username and password, as well as a path in the application to which to redirect\n  when no valid credentials are present.   <?php\n// in a config/autoload/*.global.php file:\n\ndeclare(strict_types=1);\n\n//use App\\Infrastructure\\Repository\\UserRepository;\n//use App\\Infrastructure\\Repository\\UserRepositoryFactory;\nuse Zend\\Expressive\\Authentication\\AuthenticationInterface;\nuse Zend\\Expressive\\Authentication\\Session\\PhpSession;\nuse Zend\\Expressive\\Authentication\\UserRepositoryInterface;\n\nreturn [\n    'dependencies' => [\n        'aliases' => [\n            AuthenticationInterface::class => PhpSession::class,\n            UserRepositoryInterface::class => UserRepository::class,\n        ],\n\n        'factories' => [\n            UserRepository::class => UserRepositoryFactory::class,\n        ],\n    ],\n\n    'authentication' => [\n        'username' => null, // provide a custom field name for the username\n        'password' => null, // provide a custom field name for the password\n        'redirect' => '/login', // URI to which to redirect if no valid credentials present\n    ],\n];",
            "title": "Configuration"
        }
    ]
}